PITS - Tracker software for the PITS board, for use in High Altitude Ballooning.

Created by Dave Akerman (dave@daveakerman.com)

This software is written for the Raspberry Pi model A+, B+ or V2 B, with the Pi In The Sky (PITS+) board from http://ava.upuaut.net/store/.
Also works with the model A or B Pi and the earlier PITS board.

NOT fully tested with the V3 B Pi.  We do not recommend this board due to serial port changes.

Software support is provided for customers who have purchased a PITS or PITS+ board, for use with that board only.

INSTALLING
==========

Follow the instructions at http://www.pi-in-the-sky.com/index.php?id=sd-card-image-from-scratch

USB WEBCAM
==========

The Pi Zero does not have a CSI camera port, so if you want to use it with a camera then you'll need to add a USB webcam.  To do that, you need to install fswebcam:

	sudo apt-get install fswebcam

and you need to edit /boot/pisky.txt and change the "camera" line to be:

	Camera=U

(U/F/u/f all work to enable USB/fswebcam; N/n is for no camera, Y/y/1/TC/c is for CSI camera).

DEVTREE
=======

If you wish to enable devtree (e.g. to use PITS with the Astro Pi board) then you will need to make a small edit to enable the DS18B20 temperature sensor, otherwise all readings will be zero.  Search for "Pi DS18B20 device tree" for information.

RASPBIAN JESSIE
===============

We do not recommend the full version of Jessie as it starts the graphical X environment by default, and uses a lot of SD card space.  Instead, install the "Lite" version.

The Lite version does not include "git" so you will need to install that yourself, with:

	sudo apt-get install git

(this is included in the instructions linked above).

IMAGE PROCESSING
================

All images now include telemetry (longitude, latitude, altitude) in the JPEG comment field, but only if EXIV2 has been installed.

It is therefore possible to overlay downloaded images with telemetry data, as text or graphics, using (for example) ImageMagick, and EXIV2 to extract the data from the JPEG being processed.  A sample script is provided.  The software will automatically execute a script called "process_image" if present.


CHANGE LOG
==========

25/09/2016
==========

- Added SSDV_settings to pisky.txt - add command-line parameter when calling SSDV program- Removed support for running without device tree
- Fixed setting of implicit/explicit mode manually, ditto low-data-rate optimisation
- Truncate SSDV images larger than max size (currently 4096 packets)


14/08/2016
==========

- Added option for serial GPS connection.  Use GPS_Device=/dev/ttyACM0 for example.
- Re-enabled APRS script

12/08/2016
==========

- Fixed error where LoRa channel stopped transmitting after a few sentences if SSDV disabled on that channel
- Increased maximum size of SSDV file to 4096 packets
- Add option to disable reading of ADC, and also transmission of ADC values

17/06/2016
==========

- BME280 driver

18/05/2015
==========

- Ability to receive SMS-style messages uplinked from the ground via LoRa.  Messages are saved to a text file and can then be processed externally (e.g. by supplied Python script to display on a Pi Sense HAT)
- Ability to include, in the LoRa telemetry, CSV data from an external file.  Sample Python script supplied to build that file from Sense HAT sensor data.
- Ability to re-send SSDV packets, via LoRa, that were not received on the ground.  Uses a LoRa uplink message to define which packets need to be sent.
- Can include uplink message status in LoRa telemetry.
- Photo sizes forced to be no smaller than 320x240, to avoid limitation in raspistill program.
- RTTY can be switched off (no data no carrier) during LoRa uplink periods.
- Use of EXIV2 (if installed) to insert telemetry data into all stored JPEG images, in the JPEG comment field
- Sample image processing script to extract telemetry from JPEG comment field, and insert into downloaded images as a text overlay, using ImageMagick

01/03/2016
==========

- Test for latest Pi boards; assume PITS+ if not a known board
- clear.txt now actually works
- Better setting of MTX2 frequency

28/11/2015

- Suport for Pi Zero
- Support for USB webcam via fswebcam

12/10/2015

- Added "camera_settings" option for config file
- Fixed IP check which faulted when Pi on a VPN

18/08/2015

- Merged in LoRa code (LoRa branch is now defunct)
- Photographs can now be taken at independent rates for RTTY, LoRa, full-size
- Landing prediction option
- Fixes for multiple DS18B20 sensors
- Ability to run emulated flight from GPS NMEA file
- Ability to modify SSDV images before transmission using ImageMagick etc.
- LoRa Calling Mode
- RTTY serial port kept open continuously
- Startup radio message with IP address etc.
- Stop multiple tracker programs from being run
- Test for latest Pi board
- Option to delete existing image files at startup
- Image files now in names/dated folders e.g. /home/pi/images/RTTY/18_08_2015

17/06/2015

- Merged in APRS code (APRS branch is now defunct)
- Added options to control when APRS packets are sent
- Fixed issue with tracker program failing SD card is pulled and APRS enabled
- NTX2 frequency-setting code now has same improvements as for MTX2
- Serial port kept open now instead of open/close each packet; using flush command to sync instead of closing.  This allows ...
- ... Telemetry log entries now written whilst waiting for telemetry to Tx; removes/reduces delay due to SD card writing.

01/06/2015

- MTX2 frequency-setting code changed to fix random fails to set frequency
- logging now on by default
- log files removed from repository
- Long payload IDs are truncated to 6 before passing to SSDV program
- SSDV image widths and heights now forced to be multiples of 16 pixels
- Added support for second (external) DS18B20 temperature sensor
- Fix to occassional missing packets
- Support for Pi V2 B
- Protect against BMP085/180 being disconnected after initialisation

19/12/2014

- GPS code completely re-written to use WiringPi library instead of bcm library
- default configuration now leaves the monitor on, to ease development
- As the PITS+ boards are set by frequency in MHz, but the earlier board was
  set by channel number, the code now accepts either "frequency=nn" for channel
  number, of frequency=xxx.xxxMHz for actual frequency.  Not that using the
  second form does not give you more options on the older board - the frequency
  will be set to the closest channnel.
- Camera filenames are now the system time
- Camera images are now saved in dated folders

